# 1.定义一个函数
"""
function sayHello() {
  console.log('hello world')
  return ''
}
"""
def sayHello():
    print('hello world')
    return ''

sayHello() # hello world ''

# 定义参数
"""
function sum1(num1, num2){
  return num1 + num2
} 
"""
def sum1(num1, num2):
  return num1 + num2

print(sum1(3, 5)) # 8

# 定义参数默认值
"""
function sum2(num1 = 0, num2 = 0){
  return num1 + num2
}
"""
def sum2(num1 = 0, num2 = 0):
    return num1 + num2

print(sum2(3, 5)) # 8

# 可变参数列表
"""
function sum3(...args) {
  if(args.length == 0) {
    return 0
  } else {
    var res = 0
    for(var num of args) {
      res += num
    }
    return res
  }
}
"""
def sum3(*args):
    if(len(args) == 0):
        return 0
    else:
        res = 0
        for num in args:
            res += num
        return res

print(sum3(1,3,4)) # 8

# 匿名函数 lambda
"""
var lambdaSayHello = () => console.log('hello world')

var lamadaSum1 = (num1, num2) => num1 + num2

var lamadaSum2 = (num1 = 0, num2 = 0) => num1 + num2

var lamadaSum3 = (...args) => args.length == 0 ? 0 : Array.from(args).reduce((x, y) => x + y, 0)
"""
lambdaSayHello = lambda: print('hello world')

lamadaSum1 = lambda num1, num2: num1 + num2

lamadaSum2 = lambda num1=0, num2=0: num1 + num2

lamadaSum3 = lambda *args: (
    0 if len(args) == 0 else (
        reduce(lambda x, y: x + y, args)
    )
)

# 查看函数的属性
print(type(sum3)) # <class 'function'>
print(type(lamadaSum3)) # <class 'function'>
print(isinstance(sum3, type(lambda: None))) # True

# 获取函数的内容
"""
sum1.toString() // 'function sum1(num1, num2){\n  return num1 + num2\n}'
"""
import inspect
funcStr = inspect.getsource(sum1) 
print(type(funcStr)) #  <class 'str'>
print(funcStr) # 'def sum1(num1, num2):\n  return num1 + num2\n'

# 获取函数的参数数量
"""
sum1.length // 2
"""
import inspect
print(len(inspect.signature(sum1).parameters)) # 2

# 函数作为参数传递
"""
function execFunc(func, ...args){
  return func(...args)
}
"""
def execFunc(func, *args):
    return func(*args)

execFunc(sum1, 3, 5) # 8

# 作用域 全局作用域和局部作用域
def showVal():
    print('sayHello', sayHello) # 读取外部作用域
    print('lambdaSayHello', lambdaSayHello) 
    val = 'val'
    print('val', val) # 读取局部作用域
    
showVal()
# sayHello <function sayHello at 0x7f17c003c5e0>
# lambdaSayHello <function <lambda> at 0x7f17c03fa670>
# val val

# 递归
"""
flag = 0
function increateFlag() {
  console.log(flag)
  flag ++
  if(flag < 5){
    increateFlag()
  }
}
increateFlag()
console.log(flag) # 5
"""
flag = 0
def increateFlag():
    global flag
    print(flag)
    flag += 1
    if(flag < 5):
        increateFlag()
        
increateFlag()
print(flag) # 5

# 闭包
"""
function useCounter(defaultNum = 0) {
  var num = defaultNum
  if(!Number.isSafeInteger(defaultNum)) {
    num = 0
  }
  function getValue() {
    return num
  }
  function increate() {
    num += 1
    return getValue()
  }
  return [getValue, increate]
}
"""
def useCounter(defaultNum=0):
    num = defaultNum
    if(type(defaultNum) != int):
        num = 0
    def getValue():
        return num
    def increate():
        nonlocal num # 当内部函数要修改外部函数的变量时，需要加的声明，否则会报错 UnboundLocalError: local variable 'num' referenced before assignment
        num += 1
        return getValue()
    
    return [getValue, increate]

counter = useCounter() # [<function __main__.useCounter.<locals>.getValue()>,<function __main__.useCounter.<locals>.increate()>] 
counter[0]() # 0
counter[1]() # 1
counter[0]() # 1

"""
count = 0
function increateCount() {
  count+= 1
}
function printCount() {
  console.log(count)
}
"""
count = 0
def increateCount():
    global count # 当函数要修改全局作用域的变量时，需要加的声明，否则会报错 UnboundLocalError: local variable 'count' referenced before assignment
    count+= 1
    
def printCount():
    print(count)
    return count
printCount() # 0
increateCount() # None
printCount() # 1

# 从字符串执行代码 eval和exec
# - 执行语句
"""
evalStr = `for(var i = 0;i < 5;i++){ console.log(i) }`
eval(evalStr) // undefined
"""
evalStr = """
for i in range(5):
    print(i)
"""
exec(evalStr) # None
# - 执行代码表达式并获取返回值
"""
evalStr = "2 + 3 * 4"
evalRes = eval(evalStr) // 14
"""
evalStr = "2 + 3 * 4"
evalRes = eval(evalStr) # 14

# 从字符串创建函数
# - 创建具名函数
"""
named_function_str = `function named_function() { console.log('我是具名函数') }`
eval(named_function_str)
named_function() // 我是具名函数
"""
named_function_str = """
def named_function():
    print('我是具名函数')
"""
# 从字符串创建具名函数并注册到全局作用域
exec(named_function_str, globals())
# 调用
globals()['named_function']() # 我是具名函数

# - 创建匿名函数
"""
unnamed_function_str = `() => console.log('我是匿名函数')`
unnamed_function = eval(unnamed_function_str)
unnamed_function() // 我是匿名函数
"""
unnamed_function_str = "lambda: print('我是匿名函数')"
unnamed_function = eval(unnamed_function_str)
# 调用
unnamed_function() # 我是匿名函数
