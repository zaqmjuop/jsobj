# JavaScript 数组参考手册 https://www.w3school.com.cn/jsref/jsref_obj_array.asp

# concat 连接两个或多个数组，并返回已连接数组的副本。
def concat(ary1, ary2):
    return ary1 + ary2

concat(list1, list2) # ['Google', 'W3Cschool', 1997, '222', 1, 2, 3, 4, 5, 6, 7]

# entries()	返回键/值对数组迭代对象。
def aryEntries(ary):
    def generateIterator():
        i = 0
        while True:
            if(i < len(ary)):
                yield {"value": [i, ary[i]], "done": False}
            else:
                yield {"value": None, "done": True}
            i += 1
        
    it = generateIterator()
    return it

it = aryEntries(["Banana", "Orange", "Apple", "Mango"])
print(next(it)) # {'value': [0, 'Banana'], 'done': False}
print(next(it)) # {'value': [1, 'Orange'], 'done': False}
print(next(it)) # {'value': [2, 'Apple'], 'done': False}
print(next(it)) # {'value': [3, 'Mango'], 'done': False}
print(next(it)) # {'value': None, 'done': True}
print(next(it)) # {'value': None, 'done': True}

# every()	检查数组中的每个元素是否通过测试。
def every(ary, func):
    for i in range(0, len(ary)):
        if(bool(func(ary[i], i, ary)) == True):
            return False
    return True

print(every([32, 33, 16, 40], lambda age, index, ary: age > 18)) # False
print(every([32, 33, 40], lambda age, index, ary: age > 18)) # False
print(every([], lambda age, index, ary: age > 18)) # True

# fill()	用静态值填充数组中的元素。
def fill(ary, value, start = 0, end = -1):
    if(end == -1):
        end = len(ary)
    for i in range(start, end):
        ary[i] = value

fruits = ["Banana", "Orange", "Apple", "Mango"];
fill(fruits, "Kiwi", 2, 4);
print(fruits) # ['Banana', 'Orange', 'Kiwi', 'Kiwi']

# filter()	使用数组中通过测试的每个元素创建新数组。
def aryFilter(ary, func):
    res = []
    for i in range(0, len(ary)):
        if(bool(func(ary[i], i, ary)) == True):
            res.append(ary[i])
    return res


print(aryFilter([32, 33, 16, 40], lambda age, index, ary: age > 18)) # [32, 33, 40]

# find()	返回数组中第一个通过测试的元素的值。
def find(ary, func):
    for i in range(0, len(ary)):
        if(bool(func(ary[i], i, ary)) == True):
            return ary[i]
    return None

print(find([3, 10, 18, 20], lambda age, index, ary: age > 18)) # 20
print(find([3, 10, 18], lambda age, index, ary: age > 18)) # None

# findIndex()	返回数组中通过测试的第一个元素的索引。
def findIndex(ary, func):
    for i in range(0, len(ary)):
        if(bool(func(ary[i], i, ary)) == True):
            return i
    return -1

print(findIndex([3, 10, 18, 20], lambda age, index, ary: age > 18)) # 3
print(findIndex([3, 10, 18], lambda age, index, ary: age > 18)) # -1

# forEach()	为每个数组元素调用函数。
def forEach(ary, func):
    for i in range(0, len(ary)):
        func(ary[i], i, ary)
    return None

forEach([65, 44, 12, 4], lambda age, index, ary: print(age, index, ary))
# 65 0 [65, 44, 12, 4]
# 44 1 [65, 44, 12, 4]
# 12 2 [65, 44, 12, 4]
# 4 3 [65, 44, 12, 4]

# includes()	检查数组是否包含指定的元素。
def includes(ary, element, start = 0):
    for i in range(start, len(ary)):
        if(ary[i] == element):
            return True
    return False

print(includes(["Banana", "Orange", "Apple", "Mango"], "Banana")) # True
print(includes(["Banana", "Orange", "Apple", "Mango"], "Banana", 3)) # False

# indexOf()	在数组中搜索元素并返回其位置。
def indexOf(ary, item, start = 0):
    for i in range(start, len(ary)):
        if(ary[i] == item):
            return i
    return -1

print(indexOf(["Banana", "Orange", "Apple", "Mango", "Banana", "Orange", "Apple"], 'Apple', 4)) # 6
print(indexOf(["Banana", "Orange", "Apple", "Mango", "Banana", "Orange", "Apple"], 'Apple1')) # -1

# isArray()	检查对象是否为数组。
def isArray(ary):
    return isinstance(ary , list)

print(isArray(list1)) # True

# join(): string	将数组的所有元素连接成一个字符串。
def aryjoin(ary, separator = ''):
    length = len(ary)
    if(length == 0):
        return ''
    res = ary[0]
    for i in range(1, length):
        res += separator
        res += ary[i]
    return res

print(aryjoin(["Banana", "Orange", "Apple", "Mango"])) # BananaOrangeAppleMango
print(aryjoin(["Banana", "Orange", "Apple", "Mango"],  ', ')) # Banana, Orange, Apple, Mango
print(aryjoin(["Banana", "Orange", "Apple", "Mango"], '\n'))
# Banana
# Orange
# Apple
# Mango

# keys()	返回 Array Iteration 对象，包含原始数组的键.
def keys(ary):
    def generateIterator():
        i = 0
        while True:
            if(i < len(ary)):
                yield {"value": i, "done": False}
            else:
                yield {"value": None, "done": True}
            i += 1
        
    it = generateIterator()
    return it

it = keys(["Banana", "Orange", "Apple", "Mango"])
print (next(it)) # {'value': 0, 'done': False}
print (next(it)) # {'value': 1, 'done': False}
print (next(it)) # {'value': 2, 'done': False}
print (next(it)) # {'value': 3, 'done': False}
print (next(it)) # {'value': None, 'done': True}
print (next(it)) # {'value': None, 'done': True}
print (next(it)) # {'value': None, 'done': True} 

# lastIndexOf(): number	在数组中搜索元素，从末尾开始，并返回其位置。
def lastIndexOf(ary, item, start = 0):
    for i in range(len(ary) - 1, start - 1, -1): # -1 是遍历步长, start - 1遍历结束标识
        if(ary[i] == item):
            return i
    return -1

print(lastIndexOf(["Banana", "Orange", "Apple", "Mango", "Banana", "Orange", "Apple"], "Apple", 4)) # 6

# map(): any[]	使用为每个数组元素调用函数的结果创建新数组。
def aryMap(ary, func):
    resAry = ary.copy()
    for i in range(0, len(resAry)):
        resAry[i] = func(ary[i], i, ary)
    return resAry

print(aryMap([
    {"firstname" : "Malcom", "lastname": "Reynolds"},
    {"firstname" : "Kaylee", "lastname": "Frye"},
    {"firstname" : "Jayne", "lastname": "Cobb"}
], lambda item, index, ary: f"firstname:{item['firstname']},lastname:{item['lastname']}")) 
# ['firstname:Malcom,lastname:Reynolds', 'firstname:Kaylee,lastname:Frye', 'firstname:Jayne,lastname:Cobb']


# pop(): any	删除数组的最后一个元素，并返回该元素。
def aryPop(ary):
    return ary.pop()

fruits = ["Banana", "Orange", "Apple", "Mango"];
print(aryPop(fruits), fruits) # Mango ['Banana', 'Orange', 'Apple']

# push(): number	将新元素添加到数组的末尾，并返回新的长度。
def aryPush(ary, *args):
    for item in args:
        ary.append(item)
    return len(ary)

fruits = ["Banana", "Orange", "Apple", "Mango"];
print(aryPush(fruits, "Kiwi"), fruits) # 5 ['Banana', 'Orange', 'Apple', 'Mango', 'Kiwi']
print(aryPush(fruits, "Kiwi", "Lemon", "Pineapple"), fruits) # 8 ['Banana', 'Orange', 'Apple', 'Mango', 'Kiwi', 'Kiwi', 'Lemon', 'Pineapple']
print(aryPush(fruits), fruits) # 8 ['Banana', 'Orange', 'Apple', 'Mango', 'Kiwi', 'Kiwi', 'Lemon', 'Pineapple']

# reduce(): any	将数组的值减为单个值（从左到右）。
def aryReduce(ary, func, initialValue = None):
    total = initialValue
    for i in range(0, len(ary)):
        total = func(total, ary[i], i, ary)
    return total

print(aryReduce([175, 50, 25], lambda total, currentValue, currentIndex, arr: f"{total} {currentValue}", '')) #  175 50 25

# reduceRight(): any	将数组的值减为单个值（从右到左）。
def aryReduceRight(ary, func, initialValue = None):
    total = initialValue
    for i in range(len(ary) - 1, -1, -1):
        total = func(total, ary[i], i, ary)
    return total

print(aryReduceRight([175, 50, 25], lambda total, currentValue, currentIndex, arr: f"{total} {currentValue}", '')) #  25 50 175

# reverse(): any[]	反转数组中元素的顺序。
def aryReverse(ary):
    length = len(ary)
    for i in range(0, int(length / 2)):
        itemLeft = ary[i]
        ary[i] = ary[length - 1 - i]
        ary[length - 1 - i] = itemLeft
    return ary

print(aryReverse([1,2,3,4,5])) # [5, 4, 3, 2, 1]
print(aryReverse([1,2,3,4,5, 6])) # [6, 5, 4, 3, 2, 1]
print(aryReverse([])) # []

# shift(): any	删除数组的第一个元素，并返回该元素。
def aryShift(ary):
    res = ary[0]
    del ary[0]
    return res

fruits = ["Banana", "Orange", "Apple", "Mango"];
print(aryShift(fruits), fruits) # Banana ['Orange', 'Apple', 'Mango']

# slice(): any[]	选择数组的一部分，并返回新数组
def arySlice(ary, start = 0, end = None):
    if(end == None):
        end = len(ary) - 1
    return ary[start: end]

print(arySlice(["Banana", "Orange", "Lemon", "Apple", "Mango"], 1, 3)) # ['Orange', 'Lemon']
print(arySlice(["Banana", "Orange", "Lemon", "Apple", "Mango"], -3, -1)) # ['Lemon', 'Apple']

# some(): boolean	检查数组中的任何元素是否通过测试。
def arySome(ary, func):
    for i in range(0, len(ary)):
        if(bool(func(ary[i], i, ary)) == True):
            return True
    return False

print(arySome([3, 10, 18, 20], lambda age, index, ary: age > 18)) # True
print(arySome([3, 10, 18], lambda age, index, ary: age > 18)) # False
print(arySome([], lambda age, index, ary: age > 18)) # False

# sort(): any[]	对数组的元素进行排序。
def arySort(ary, func = lambda a,b: a-b):
    n = len(ary)
    for i in range(1, n):
        itemI = ary[i]
        j = i - 1
        while j >= 0 and int(func(ary[j], itemI)) > 0:
            ary[j + 1] = ary[j]
            j -= 1
        ary[j + 1] = itemI
    return ary

print(arySort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])) [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
print(arySort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], lambda a,b: a%2-b%2)) [4, 2, 6, 3, 1, 1, 5, 9, 5, 3, 5]
print(3%2, 9%2, 8%2) # 1 1 0

# splice(): any[]	从数组中添加/删除元素。
def arySplice(ary, index, howmany = 0, *args):
    for i in range(0, howmany):
        del ary[index]
    for i in range(len(args) - 1, -1, -1):
        ary.insert(index, args[i])
    return ary

print(arySplice(["Banana", "Orange", "Apple", "Mango"], 2, 1, "Lemon", "Kiwi")) # ['Banana', 'Orange', 'Lemon', 'Kiwi', 'Mango']
print(arySplice(["Banana", "Orange", "Apple", "Mango", "Kiwi"], 2, 2)) # ['Banana', 'Orange', 'Kiwi']

# toString(): string	将数组转换为字符串，并返回结果。
def aryToString(ary):
    if(len(ary) == 0):
        return ''
    res = ary[0]
    for i in range(1, len(ary)):
        res += ','
        res += ary[i]
    return res

print(aryToString(["Banana", "Orange", "Apple", "Mango"])) # Banana,Orange,Apple,Mango

# unshift():number	将新元素添加到数组的开头，并返回新的长度。
def aryUnshift(ary, *args):
    for i in range(len(args) - 1, -1, -1):
        ary.insert(0, args[i])
    return len(ary)

fruits = ["Banana", "Orange", "Apple", "Mango"]
print(aryUnshift(fruits, "Lemon","Pineapple"), fruits) # 6 ['Lemon', 'Pineapple', 'Banana', 'Orange', 'Apple', 'Mango']

